// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace DataCompare.UITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// ConnectToDb - Use 'ConnectToDbParams' to pass parameters into this method.
        /// </summary>
        public void ConnectToDb()
        {
            #region Variable Declarations
            WinEdit uITxtSrcServerEdit = this.UIDataCompareWindow.UITxtSrcServerWindow.UITxtSrcServerEdit;
            WinCheckBox uIWindowsAuthenticatioCheckBox = this.UIDataCompareWindow.UIWindowsAuthenticatioWindow.UIWindowsAuthenticatioCheckBox;
            WinButton uIConnectButton = this.UIDataCompareWindow.UIConnectWindow.UIConnectButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
            ApplicationUnderTest uIDataCompareWindow = ApplicationUnderTest.Launch(this.ConnectToDbParams.UIDataCompareWindowExePath, this.ConnectToDbParams.UIDataCompareWindowAlternateExePath);

            // Type '.' in 'txtSrcServer' text box
            uITxtSrcServerEdit.Text = this.ConnectToDbParams.UITxtSrcServerEditText;

            // Select 'Windows Authentication' check box
            uIWindowsAuthenticatioCheckBox.Checked = this.ConnectToDbParams.UIWindowsAuthenticatioCheckBoxChecked;

            // Click 'Connect' button
            Mouse.Click(uIConnectButton, new Point(38, 14));
        }
        
        /// <summary>
        /// AssertClickConnect - Use 'AssertClickConnectExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertClickConnect()
        {
            #region Variable Declarations
            WinButton uIConnectedButton = this.UIDataCompareWindow.UIConnectWindow.UIConnectedButton;
            WinComboBox uICboSrcDBComboBox = this.UIDataCompareWindow.UICboSrcDBWindow.UICboSrcDBComboBox;
            WinButton uISelectButton = this.UIDataCompareWindow.UISelectWindow.UISelectButton;
            #endregion

            // Verify that the 'DisplayText' property of 'Connected' button equals 'Connected'
            Assert.AreEqual(this.AssertClickConnectExpectedValues.UIConnectedButtonDisplayText, uIConnectedButton.DisplayText);

            // Verify that the 'SelectedItem' property of 'cboSrcDB' combo box equals 'EmployeeManagement'
            Assert.AreEqual(this.AssertClickConnectExpectedValues.UICboSrcDBComboBoxSelectedItem, uICboSrcDBComboBox.SelectedItem);

            // Verify that the 'Enabled' property of 'Select' button equals 'True'
            Assert.AreEqual(this.AssertClickConnectExpectedValues.UISelectButtonEnabled, uISelectButton.Enabled);
        }
        
        /// <summary>
        /// CloseApp
        /// </summary>
        public void CloseApp()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDataCompareWindow.UIDataCompareTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 7));
        }
        
        /// <summary>
        /// CompareData - Use 'CompareDataParams' to pass parameters into this method.
        /// </summary>
        public void CompareData()
        {
            #region Variable Declarations
            WinWindow uITxtSrcServerWindow = this.UIDataCompareWindow.UISourceClient.UITxtSrcServerWindow;
            WinEdit uITxtSrcServerEdit = this.UIDataCompareWindow.UITxtSrcServerWindow.UITxtSrcServerEdit;
            WinCheckBox uIWindowsAuthenticatioCheckBox = this.UIDataCompareWindow.UIWindowsAuthenticatioWindow.UIWindowsAuthenticatioCheckBox;
            WinButton uIConnectButton = this.UIDataCompareWindow.UIConnectWindow.UIConnectButton;
            WinButton uISelectButton = this.UIDataCompareWindow.UISelectWindow.UISelectButton;
            WinTabPage uITargetTabPage = this.UIDataCompareWindow.UISourceEmptyTabList.UITargetTabPage;
            WinEdit uITxtTrgServerEdit = this.UIDataCompareWindow.UITxtTrgServerWindow.UITxtTrgServerEdit;
            WinCheckBox uIWindowsAuthenticatioCheckBox1 = this.UIDataCompareWindow.UIWindowsAuthenticatioWindow1.UIWindowsAuthenticatioCheckBox;
            WinButton uIConnectButton1 = this.UIDataCompareWindow.UIConnectWindow1.UIConnectButton;
            WinButton uISelectButton1 = this.UIDataCompareWindow.UISelectWindow1.UISelectButton;
            WinComboBox uICboTrgTableComboBox = this.UIDataCompareWindow.UICboTrgTableWindow.UICboTrgTableComboBox;
            WinEdit uITxtTrgFilterEdit = this.UIDataCompareWindow.UITxtTrgFilterWindow.UITxtTrgFilterEdit;
            WinButton uIEditMappingButton = this.UIDataCompareWindow.UIEditMappingWindow.UIEditMappingButton;
            WinCell uIFalseCell = this.UIDataCompareWindow.UIDgvMappingsWindow.UIDataGridViewTable.UIRow0Row.UIFalseCell;
            WinCell uIFalseCell1 = this.UIDataCompareWindow.UIDgvMappingsWindow.UIDataGridViewTable.UIRow2Row.UIFalseCell;
            WinButton uICompareButton = this.UIDataCompareWindow.UICompareWindow.UICompareButton;
            WinButton uIFinishButton = this.UIComparingWindow.UIFinishWindow.UIFinishButton;
            #endregion

            // Click 'txtSrcServer' window
            Mouse.Click(uITxtSrcServerWindow, new Point(93, 0));

            // Type '.' in 'txtSrcServer' text box
            uITxtSrcServerEdit.Text = this.CompareDataParams.UITxtSrcServerEditText;

            // Select 'Windows Authentication' check box
            uIWindowsAuthenticatioCheckBox.Checked = this.CompareDataParams.UIWindowsAuthenticatioCheckBoxChecked;

            // Click 'Connect' button
            Mouse.Click(uIConnectButton, new Point(28, 14));

            // Click 'Select' button
            Mouse.Click(uISelectButton, new Point(25, 14));

            // Click 'Target' tab
            Mouse.Click(uITargetTabPage, new Point(69, 6));

            // Type '.' in 'txtTrgServer' text box
            uITxtTrgServerEdit.Text = this.CompareDataParams.UITxtTrgServerEditText;

            // Select 'Windows Authentication' check box
            uIWindowsAuthenticatioCheckBox1.Checked = this.CompareDataParams.UIWindowsAuthenticatioCheckBoxChecked1;

            // Click 'Connect' button
            Mouse.Click(uIConnectButton1, new Point(24, 14));

            // Click 'Select' button
            Mouse.Click(uISelectButton1, new Point(31, 12));

            // Select 'dbo.employee2' in 'cboTrgTable' combo box
            uICboTrgTableComboBox.SelectedItem = this.CompareDataParams.UICboTrgTableComboBoxSelectedItem;

            // Click 'txtTrgFilter' text box
            Mouse.Click(uITxtTrgFilterEdit, new Point(103, 10));

            // Click 'Edit Mapping' button
            Mouse.Click(uIEditMappingButton, new Point(39, 182));

            // Select 'False' cell
            uIFalseCell.Checked = this.CompareDataParams.UIFalseCellChecked;

            // Select 'False' cell
            uIFalseCell1.Checked = this.CompareDataParams.UIFalseCellChecked1;

            // Click 'Compare' button
            Mouse.Click(uICompareButton, new Point(77, 17));

            // Click 'Finish' button
            Mouse.Click(uIFinishButton, new Point(50, 14));
        }
        
        /// <summary>
        /// AssertCompare - Use 'AssertCompareExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCompare()
        {
            #region Variable Declarations
            WinCell uIItem1Cell = this.UIDataCompareWindow.UIDgvResultWindow.UIDataGridViewTable.UIRow0Row.UIItem1Cell;
            WinButton uIExportButton = this.UIDataCompareWindow.UIExportWindow.UIExportButton;
            WinCheckBox uIShowDiffColumnsOnlyCheckBox = this.UIDataCompareWindow.UIShowDiffColumnsOnlyWindow.UIShowDiffColumnsOnlyCheckBox;
            #endregion

            // Verify that the 'Exists' property of '1' cell equals 'True'
            Assert.AreEqual(this.AssertCompareExpectedValues.UIItem1CellExists, uIItem1Cell.Exists);

            // Verify that the 'Enabled' property of 'Export' button equals 'True'
            Assert.AreEqual(this.AssertCompareExpectedValues.UIExportButtonEnabled, uIExportButton.Enabled);

            // Verify that the 'Enabled' property of 'Show Diff Columns Only' check box equals 'True'
            Assert.AreEqual(this.AssertCompareExpectedValues.UIShowDiffColumnsOnlyCheckBoxEnabled, uIShowDiffColumnsOnlyCheckBox.Enabled);
        }
        
        /// <summary>
        /// CloseCompare
        /// </summary>
        public void CloseCompare()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDataCompareWindow.UIDataCompareTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 7));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {

            // Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
            ApplicationUnderTest dataCompareApplication = ApplicationUnderTest.Launch(this.RecordedMethod1Params.ExePath, this.RecordedMethod1Params.AlternateExePath);
        }
        
        /// <summary>
        /// ExportOper - Use 'ExportOperParams' to pass parameters into this method.
        /// </summary>
        public void ExportOper()
        {
            #region Variable Declarations
            WinEdit uITxtSrcServerEdit = this.UIDataCompareWindow.UITxtSrcServerWindow.UITxtSrcServerEdit;
            WinCheckBox uIWindowsAuthenticatioCheckBox = this.UIDataCompareWindow.UIWindowsAuthenticatioWindow.UIWindowsAuthenticatioCheckBox;
            WinButton uIConnectButton = this.UIDataCompareWindow.UIConnectWindow.UIConnectButton;
            WinButton uISelectButton = this.UIDataCompareWindow.UISelectWindow.UISelectButton;
            WinTabPage uITargetTabPage = this.UIDataCompareWindow.UISourceEmptyTabList.UITargetTabPage;
            WinEdit uITxtTrgServerEdit = this.UIDataCompareWindow.UITxtTrgServerWindow.UITxtTrgServerEdit;
            WinCheckBox uIWindowsAuthenticatioCheckBox1 = this.UIDataCompareWindow.UIWindowsAuthenticatioWindow1.UIWindowsAuthenticatioCheckBox;
            WinButton uIConnectButton1 = this.UIDataCompareWindow.UIConnectWindow1.UIConnectButton;
            WinButton uISelectButton1 = this.UIDataCompareWindow.UISelectWindow1.UISelectButton;
            WinComboBox uICboTrgTableComboBox = this.UIDataCompareWindow.UICboTrgTableWindow.UICboTrgTableComboBox;
            WinButton uIEditMappingButton = this.UIDataCompareWindow.UIEditMappingWindow.UIEditMappingButton;
            WinCell uIFalseCell = this.UIDataCompareWindow.UIDgvMappingsWindow.UIDataGridViewTable.UIRow0Row.UIFalseCell;
            WinButton uICompareButton = this.UIDataCompareWindow.UICompareWindow.UICompareButton;
            WinButton uIFinishButton = this.UIComparingWindow.UIFinishWindow.UIFinishButton;
            WinButton uIExportButton = this.UIDataCompareWindow.UIExportWindow.UIExportButton;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinCell uITrueCell = this.UIDataCompareWindow.UIDgvResultWindow.UIDataGridViewTable.UIRow5Row.UITrueCell;
            #endregion

            // Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
            ApplicationUnderTest uIDataCompareWindow = ApplicationUnderTest.Launch(this.ExportOperParams.UIDataCompareWindowExePath, this.ExportOperParams.UIDataCompareWindowAlternateExePath);

            // Type '.' in 'txtSrcServer' text box
            uITxtSrcServerEdit.Text = this.ExportOperParams.UITxtSrcServerEditText;

            // Select 'Windows Authentication' check box
            uIWindowsAuthenticatioCheckBox.Checked = this.ExportOperParams.UIWindowsAuthenticatioCheckBoxChecked;

            // Click 'Connect' button
            Mouse.Click(uIConnectButton, new Point(28, 14));

            // Click 'Select' button
            Mouse.Click(uISelectButton, new Point(24, 9));

            // Click 'Target' tab
            Mouse.Click(uITargetTabPage, new Point(91, 13));

            // Type '.' in 'txtTrgServer' text box
            uITxtTrgServerEdit.Text = this.ExportOperParams.UITxtTrgServerEditText;

            // Select 'Windows Authentication' check box
            uIWindowsAuthenticatioCheckBox1.Checked = this.ExportOperParams.UIWindowsAuthenticatioCheckBoxChecked1;

            // Click 'Connect' button
            Mouse.Click(uIConnectButton1, new Point(19, 12));

            // Click 'Select' button
            Mouse.Click(uISelectButton1, new Point(20, 9));

            // Select 'dbo.employee2' in 'cboTrgTable' combo box
            uICboTrgTableComboBox.SelectedItem = this.ExportOperParams.UICboTrgTableComboBoxSelectedItem;

            // Click 'Edit Mapping' button
            Mouse.Click(uIEditMappingButton, new Point(41, 176));

            // Select 'False' cell
            uIFalseCell.Checked = this.ExportOperParams.UIFalseCellChecked;

            // Click 'Compare' button
            Mouse.Click(uICompareButton, new Point(67, 20));

            // Click 'Finish' button
            Mouse.Click(uIFinishButton, new Point(70, 8));

            // Click 'Export' button
            Mouse.Click(uIExportButton, new Point(24, 19));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(19, 6));

            // Click 'True' cell
            Mouse.Click(uITrueCell, new Point(9, 15));
        }
        
        /// <summary>
        /// AssertExportExcel - Use 'AssertExportExcelExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertExportExcel()
        {
            #region Variable Declarations
            WinTitleBar uIItemTitleBar = this.UICompareResult2014091Window.UIItemWindow.UIRibbonPropertyPage.UIItemTitleBar;
            #endregion

            // Verify that the 'AccessibleDescription' property of title bar contains 'Compare Result'
            StringAssert.Contains(uIItemTitleBar.AccessibleDescription, this.AssertExportExcelExpectedValues.UIItemTitleBarAccessibleDescription);
        }
        
        /// <summary>
        /// CloseExport
        /// </summary>
        public void CloseExport()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDataCompareWindow.UIDataCompareTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 2));
        }
        
        #region Properties
        public virtual ConnectToDbParams ConnectToDbParams
        {
            get
            {
                if ((this.mConnectToDbParams == null))
                {
                    this.mConnectToDbParams = new ConnectToDbParams();
                }
                return this.mConnectToDbParams;
            }
        }
        
        public virtual AssertClickConnectExpectedValues AssertClickConnectExpectedValues
        {
            get
            {
                if ((this.mAssertClickConnectExpectedValues == null))
                {
                    this.mAssertClickConnectExpectedValues = new AssertClickConnectExpectedValues();
                }
                return this.mAssertClickConnectExpectedValues;
            }
        }
        
        public virtual CompareDataParams CompareDataParams
        {
            get
            {
                if ((this.mCompareDataParams == null))
                {
                    this.mCompareDataParams = new CompareDataParams();
                }
                return this.mCompareDataParams;
            }
        }
        
        public virtual AssertCompareExpectedValues AssertCompareExpectedValues
        {
            get
            {
                if ((this.mAssertCompareExpectedValues == null))
                {
                    this.mAssertCompareExpectedValues = new AssertCompareExpectedValues();
                }
                return this.mAssertCompareExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual ExportOperParams ExportOperParams
        {
            get
            {
                if ((this.mExportOperParams == null))
                {
                    this.mExportOperParams = new ExportOperParams();
                }
                return this.mExportOperParams;
            }
        }
        
        public virtual AssertExportExcelExpectedValues AssertExportExcelExpectedValues
        {
            get
            {
                if ((this.mAssertExportExcelExpectedValues == null))
                {
                    this.mAssertExportExcelExpectedValues = new AssertExportExcelExpectedValues();
                }
                return this.mAssertExportExcelExpectedValues;
            }
        }
        
        public UIDataCompareWindow UIDataCompareWindow
        {
            get
            {
                if ((this.mUIDataCompareWindow == null))
                {
                    this.mUIDataCompareWindow = new UIDataCompareWindow();
                }
                return this.mUIDataCompareWindow;
            }
        }
        
        public UIComparingWindow UIComparingWindow
        {
            get
            {
                if ((this.mUIComparingWindow == null))
                {
                    this.mUIComparingWindow = new UIComparingWindow();
                }
                return this.mUIComparingWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UICompareResult2014091Window UICompareResult2014091Window
        {
            get
            {
                if ((this.mUICompareResult2014091Window == null))
                {
                    this.mUICompareResult2014091Window = new UICompareResult2014091Window();
                }
                return this.mUICompareResult2014091Window;
            }
        }
        #endregion
        
        #region Fields
        private ConnectToDbParams mConnectToDbParams;
        
        private AssertClickConnectExpectedValues mAssertClickConnectExpectedValues;
        
        private CompareDataParams mCompareDataParams;
        
        private AssertCompareExpectedValues mAssertCompareExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private ExportOperParams mExportOperParams;
        
        private AssertExportExcelExpectedValues mAssertExportExcelExpectedValues;
        
        private UIDataCompareWindow mUIDataCompareWindow;
        
        private UIComparingWindow mUIComparingWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UICompareResult2014091Window mUICompareResult2014091Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConnectToDb'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ConnectToDbParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
        /// </summary>
        public string UIDataCompareWindowExePath = "C:\\Users\\ricky.sang\\Desktop\\Data Comparison\\datacompareapplication\\DataCompare\\bi" +
            "n\\Release\\DataCompare.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
        /// </summary>
        public string UIDataCompareWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Data Comparison\\datacompareapplication\\DataCompare\\bin\\Rele" +
            "ase\\DataCompare.exe";
        
        /// <summary>
        /// Type '.' in 'txtSrcServer' text box
        /// </summary>
        public string UITxtSrcServerEditText = ".";
        
        /// <summary>
        /// Select 'Windows Authentication' check box
        /// </summary>
        public bool UIWindowsAuthenticatioCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertClickConnect'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertClickConnectExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Connected' button equals 'Connected'
        /// </summary>
        public string UIConnectedButtonDisplayText = "Connected";
        
        /// <summary>
        /// Verify that the 'SelectedItem' property of 'cboSrcDB' combo box equals 'EmployeeManagement'
        /// </summary>
        public string UICboSrcDBComboBoxSelectedItem = "EmployeeManagement";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Select' button equals 'True'
        /// </summary>
        public bool UISelectButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CompareData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CompareDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type '.' in 'txtSrcServer' text box
        /// </summary>
        public string UITxtSrcServerEditText = ".";
        
        /// <summary>
        /// Select 'Windows Authentication' check box
        /// </summary>
        public bool UIWindowsAuthenticatioCheckBoxChecked = true;
        
        /// <summary>
        /// Type '.' in 'txtTrgServer' text box
        /// </summary>
        public string UITxtTrgServerEditText = ".";
        
        /// <summary>
        /// Select 'Windows Authentication' check box
        /// </summary>
        public bool UIWindowsAuthenticatioCheckBoxChecked1 = true;
        
        /// <summary>
        /// Select 'dbo.employee2' in 'cboTrgTable' combo box
        /// </summary>
        public string UICboTrgTableComboBoxSelectedItem = "dbo.employee2";
        
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCompare'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertCompareExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '1' cell equals 'True'
        /// </summary>
        public bool UIItem1CellExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Export' button equals 'True'
        /// </summary>
        public bool UIExportButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Show Diff Columns Only' check box equals 'True'
        /// </summary>
        public bool UIShowDiffColumnsOnlyCheckBoxEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\ricky.sang\\Desktop\\Data Comparison\\datacompareapplication\\DataCompare\\bi" +
            "n\\Release\\DataCompare.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Desktop\\Data Comparison\\datacompareapplication\\DataCompare\\bin\\Rele" +
            "ase\\DataCompare.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExportOper'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ExportOperParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
        /// </summary>
        public string UIDataCompareWindowExePath = "C:\\Users\\ricky.sang\\Desktop\\Data Comparison\\datacompareapplication\\DataCompare\\bi" +
            "n\\Release\\DataCompare.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\Data Comparison\datacompareapplication\DataCompare\bin\Release\DataCompare.exe'
        /// </summary>
        public string UIDataCompareWindowAlternateExePath = "%USERPROFILE%\\Desktop\\Data Comparison\\datacompareapplication\\DataCompare\\bin\\Rele" +
            "ase\\DataCompare.exe";
        
        /// <summary>
        /// Type '.' in 'txtSrcServer' text box
        /// </summary>
        public string UITxtSrcServerEditText = ".";
        
        /// <summary>
        /// Select 'Windows Authentication' check box
        /// </summary>
        public bool UIWindowsAuthenticatioCheckBoxChecked = true;
        
        /// <summary>
        /// Type '.' in 'txtTrgServer' text box
        /// </summary>
        public string UITxtTrgServerEditText = ".";
        
        /// <summary>
        /// Select 'Windows Authentication' check box
        /// </summary>
        public bool UIWindowsAuthenticatioCheckBoxChecked1 = true;
        
        /// <summary>
        /// Select 'dbo.employee2' in 'cboTrgTable' combo box
        /// </summary>
        public string UICboTrgTableComboBoxSelectedItem = "dbo.employee2";
        
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertExportExcel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertExportExcelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'AccessibleDescription' property of title bar contains 'Compare Result'
        /// </summary>
        public string UIItemTitleBarAccessibleDescription = "Compare Result";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDataCompareWindow : WinWindow
    {
        
        public UIDataCompareWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "DataCompare";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public UITxtSrcServerWindow UITxtSrcServerWindow
        {
            get
            {
                if ((this.mUITxtSrcServerWindow == null))
                {
                    this.mUITxtSrcServerWindow = new UITxtSrcServerWindow(this);
                }
                return this.mUITxtSrcServerWindow;
            }
        }
        
        public UIWindowsAuthenticatioWindow UIWindowsAuthenticatioWindow
        {
            get
            {
                if ((this.mUIWindowsAuthenticatioWindow == null))
                {
                    this.mUIWindowsAuthenticatioWindow = new UIWindowsAuthenticatioWindow(this);
                }
                return this.mUIWindowsAuthenticatioWindow;
            }
        }
        
        public UIConnectWindow UIConnectWindow
        {
            get
            {
                if ((this.mUIConnectWindow == null))
                {
                    this.mUIConnectWindow = new UIConnectWindow(this);
                }
                return this.mUIConnectWindow;
            }
        }
        
        public UICboSrcDBWindow UICboSrcDBWindow
        {
            get
            {
                if ((this.mUICboSrcDBWindow == null))
                {
                    this.mUICboSrcDBWindow = new UICboSrcDBWindow(this);
                }
                return this.mUICboSrcDBWindow;
            }
        }
        
        public UISelectWindow UISelectWindow
        {
            get
            {
                if ((this.mUISelectWindow == null))
                {
                    this.mUISelectWindow = new UISelectWindow(this);
                }
                return this.mUISelectWindow;
            }
        }
        
        public UIDataCompareTitleBar UIDataCompareTitleBar
        {
            get
            {
                if ((this.mUIDataCompareTitleBar == null))
                {
                    this.mUIDataCompareTitleBar = new UIDataCompareTitleBar(this);
                }
                return this.mUIDataCompareTitleBar;
            }
        }
        
        public UISourceClient UISourceClient
        {
            get
            {
                if ((this.mUISourceClient == null))
                {
                    this.mUISourceClient = new UISourceClient(this);
                }
                return this.mUISourceClient;
            }
        }
        
        public UISourceEmptyTabList UISourceEmptyTabList
        {
            get
            {
                if ((this.mUISourceEmptyTabList == null))
                {
                    this.mUISourceEmptyTabList = new UISourceEmptyTabList(this);
                }
                return this.mUISourceEmptyTabList;
            }
        }
        
        public UITxtTrgServerWindow UITxtTrgServerWindow
        {
            get
            {
                if ((this.mUITxtTrgServerWindow == null))
                {
                    this.mUITxtTrgServerWindow = new UITxtTrgServerWindow(this);
                }
                return this.mUITxtTrgServerWindow;
            }
        }
        
        public UIWindowsAuthenticatioWindow1 UIWindowsAuthenticatioWindow1
        {
            get
            {
                if ((this.mUIWindowsAuthenticatioWindow1 == null))
                {
                    this.mUIWindowsAuthenticatioWindow1 = new UIWindowsAuthenticatioWindow1(this);
                }
                return this.mUIWindowsAuthenticatioWindow1;
            }
        }
        
        public UIConnectWindow1 UIConnectWindow1
        {
            get
            {
                if ((this.mUIConnectWindow1 == null))
                {
                    this.mUIConnectWindow1 = new UIConnectWindow1(this);
                }
                return this.mUIConnectWindow1;
            }
        }
        
        public UISelectWindow1 UISelectWindow1
        {
            get
            {
                if ((this.mUISelectWindow1 == null))
                {
                    this.mUISelectWindow1 = new UISelectWindow1(this);
                }
                return this.mUISelectWindow1;
            }
        }
        
        public UICboTrgTableWindow UICboTrgTableWindow
        {
            get
            {
                if ((this.mUICboTrgTableWindow == null))
                {
                    this.mUICboTrgTableWindow = new UICboTrgTableWindow(this);
                }
                return this.mUICboTrgTableWindow;
            }
        }
        
        public UITxtTrgFilterWindow UITxtTrgFilterWindow
        {
            get
            {
                if ((this.mUITxtTrgFilterWindow == null))
                {
                    this.mUITxtTrgFilterWindow = new UITxtTrgFilterWindow(this);
                }
                return this.mUITxtTrgFilterWindow;
            }
        }
        
        public UIEditMappingWindow UIEditMappingWindow
        {
            get
            {
                if ((this.mUIEditMappingWindow == null))
                {
                    this.mUIEditMappingWindow = new UIEditMappingWindow(this);
                }
                return this.mUIEditMappingWindow;
            }
        }
        
        public UIDgvMappingsWindow UIDgvMappingsWindow
        {
            get
            {
                if ((this.mUIDgvMappingsWindow == null))
                {
                    this.mUIDgvMappingsWindow = new UIDgvMappingsWindow(this);
                }
                return this.mUIDgvMappingsWindow;
            }
        }
        
        public UICompareWindow UICompareWindow
        {
            get
            {
                if ((this.mUICompareWindow == null))
                {
                    this.mUICompareWindow = new UICompareWindow(this);
                }
                return this.mUICompareWindow;
            }
        }
        
        public UIDgvResultWindow UIDgvResultWindow
        {
            get
            {
                if ((this.mUIDgvResultWindow == null))
                {
                    this.mUIDgvResultWindow = new UIDgvResultWindow(this);
                }
                return this.mUIDgvResultWindow;
            }
        }
        
        public UIExportWindow UIExportWindow
        {
            get
            {
                if ((this.mUIExportWindow == null))
                {
                    this.mUIExportWindow = new UIExportWindow(this);
                }
                return this.mUIExportWindow;
            }
        }
        
        public UIShowDiffColumnsOnlyWindow UIShowDiffColumnsOnlyWindow
        {
            get
            {
                if ((this.mUIShowDiffColumnsOnlyWindow == null))
                {
                    this.mUIShowDiffColumnsOnlyWindow = new UIShowDiffColumnsOnlyWindow(this);
                }
                return this.mUIShowDiffColumnsOnlyWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITxtSrcServerWindow mUITxtSrcServerWindow;
        
        private UIWindowsAuthenticatioWindow mUIWindowsAuthenticatioWindow;
        
        private UIConnectWindow mUIConnectWindow;
        
        private UICboSrcDBWindow mUICboSrcDBWindow;
        
        private UISelectWindow mUISelectWindow;
        
        private UIDataCompareTitleBar mUIDataCompareTitleBar;
        
        private UISourceClient mUISourceClient;
        
        private UISourceEmptyTabList mUISourceEmptyTabList;
        
        private UITxtTrgServerWindow mUITxtTrgServerWindow;
        
        private UIWindowsAuthenticatioWindow1 mUIWindowsAuthenticatioWindow1;
        
        private UIConnectWindow1 mUIConnectWindow1;
        
        private UISelectWindow1 mUISelectWindow1;
        
        private UICboTrgTableWindow mUICboTrgTableWindow;
        
        private UITxtTrgFilterWindow mUITxtTrgFilterWindow;
        
        private UIEditMappingWindow mUIEditMappingWindow;
        
        private UIDgvMappingsWindow mUIDgvMappingsWindow;
        
        private UICompareWindow mUICompareWindow;
        
        private UIDgvResultWindow mUIDgvResultWindow;
        
        private UIExportWindow mUIExportWindow;
        
        private UIShowDiffColumnsOnlyWindow mUIShowDiffColumnsOnlyWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtSrcServerWindow : WinWindow
    {
        
        public UITxtSrcServerWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtSrcServer";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtSrcServerEdit
        {
            get
            {
                if ((this.mUITxtSrcServerEdit == null))
                {
                    this.mUITxtSrcServerEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtSrcServerEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Filter";
                    this.mUITxtSrcServerEdit.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUITxtSrcServerEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtSrcServerEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWindowsAuthenticatioWindow : WinWindow
    {
        
        public UIWindowsAuthenticatioWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkSrcWinAuth";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIWindowsAuthenticatioCheckBox
        {
            get
            {
                if ((this.mUIWindowsAuthenticatioCheckBox == null))
                {
                    this.mUIWindowsAuthenticatioCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIWindowsAuthenticatioCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Windows Authentication";
                    this.mUIWindowsAuthenticatioCheckBox.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIWindowsAuthenticatioCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIWindowsAuthenticatioCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConnectWindow : WinWindow
    {
        
        public UIConnectWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSrcRfs";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UIConnectButton
        {
            get
            {
                if ((this.mUIConnectButton == null))
                {
                    this.mUIConnectButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConnectButton.SearchProperties[WinButton.PropertyNames.Name] = "Connect";
                    this.mUIConnectButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIConnectButton;
            }
        }
        
        public WinButton UIConnectedButton
        {
            get
            {
                if ((this.mUIConnectedButton == null))
                {
                    this.mUIConnectedButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConnectedButton.SearchProperties[WinButton.PropertyNames.Name] = "Connected";
                    this.mUIConnectedButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIConnectedButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIConnectButton;
        
        private WinButton mUIConnectedButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICboSrcDBWindow : WinWindow
    {
        
        public UICboSrcDBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboSrcDB";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICboSrcDBComboBox
        {
            get
            {
                if ((this.mUICboSrcDBComboBox == null))
                {
                    this.mUICboSrcDBComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICboSrcDBComboBox.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUICboSrcDBComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICboSrcDBComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISelectWindow : WinWindow
    {
        
        public UISelectWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnSrcRfst";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UISelectButton
        {
            get
            {
                if ((this.mUISelectButton == null))
                {
                    this.mUISelectButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISelectButton.SearchProperties[WinButton.PropertyNames.Name] = "Select";
                    this.mUISelectButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUISelectButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISelectButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDataCompareTitleBar : WinTitleBar
    {
        
        public UIDataCompareTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISourceClient : WinClient
    {
        
        public UISourceClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Source";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinWindow UITxtSrcServerWindow
        {
            get
            {
                if ((this.mUITxtSrcServerWindow == null))
                {
                    this.mUITxtSrcServerWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITxtSrcServerWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Filter";
                    this.mUITxtSrcServerWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITxtSrcServerWindow.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUITxtSrcServerWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITxtSrcServerWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISourceEmptyTabList : WinTabList
    {
        
        public UISourceEmptyTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Source Empty";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinTabPage UITargetTabPage
        {
            get
            {
                if ((this.mUITargetTabPage == null))
                {
                    this.mUITargetTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUITargetTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Target";
                    this.mUITargetTabPage.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUITargetTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUITargetTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtTrgServerWindow : WinWindow
    {
        
        public UITxtTrgServerWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtTrgServer";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtTrgServerEdit
        {
            get
            {
                if ((this.mUITxtTrgServerEdit == null))
                {
                    this.mUITxtTrgServerEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtTrgServerEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Filter";
                    this.mUITxtTrgServerEdit.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUITxtTrgServerEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtTrgServerEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWindowsAuthenticatioWindow1 : WinWindow
    {
        
        public UIWindowsAuthenticatioWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkTrgWinAuth";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIWindowsAuthenticatioCheckBox
        {
            get
            {
                if ((this.mUIWindowsAuthenticatioCheckBox == null))
                {
                    this.mUIWindowsAuthenticatioCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIWindowsAuthenticatioCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Windows Authentication";
                    this.mUIWindowsAuthenticatioCheckBox.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIWindowsAuthenticatioCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIWindowsAuthenticatioCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConnectWindow1 : WinWindow
    {
        
        public UIConnectWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnTrgRfs";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UIConnectButton
        {
            get
            {
                if ((this.mUIConnectButton == null))
                {
                    this.mUIConnectButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConnectButton.SearchProperties[WinButton.PropertyNames.Name] = "Connect";
                    this.mUIConnectButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIConnectButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIConnectButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISelectWindow1 : WinWindow
    {
        
        public UISelectWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnTrgRfst";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UISelectButton
        {
            get
            {
                if ((this.mUISelectButton == null))
                {
                    this.mUISelectButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISelectButton.SearchProperties[WinButton.PropertyNames.Name] = "Select";
                    this.mUISelectButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUISelectButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISelectButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICboTrgTableWindow : WinWindow
    {
        
        public UICboTrgTableWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboTrgTable";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinComboBox UICboTrgTableComboBox
        {
            get
            {
                if ((this.mUICboTrgTableComboBox == null))
                {
                    this.mUICboTrgTableComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUICboTrgTableComboBox.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUICboTrgTableComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUICboTrgTableComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtTrgFilterWindow : WinWindow
    {
        
        public UITxtTrgFilterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtTrgFilter";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtTrgFilterEdit
        {
            get
            {
                if ((this.mUITxtTrgFilterEdit == null))
                {
                    this.mUITxtTrgFilterEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtTrgFilterEdit.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUITxtTrgFilterEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtTrgFilterEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIEditMappingWindow : WinWindow
    {
        
        public UIEditMappingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnEditMapping";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UIEditMappingButton
        {
            get
            {
                if ((this.mUIEditMappingButton == null))
                {
                    this.mUIEditMappingButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEditMappingButton.SearchProperties[WinButton.PropertyNames.Name] = "Edit Mapping";
                    this.mUIEditMappingButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIEditMappingButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEditMappingButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDgvMappingsWindow : WinWindow
    {
        
        public UIDgvMappingsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvMappings";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDataGridViewTable : WinTable
    {
        
        public UIDataGridViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public UIRow0Row UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row(this);
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow2Row UIRow2Row
        {
            get
            {
                if ((this.mUIRow2Row == null))
                {
                    this.mUIRow2Row = new UIRow2Row(this);
                }
                return this.mUIRow2Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row mUIRow0Row;
        
        private UIRow2Row mUIRow2Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow0Row : WinRow
    {
        
        public UIRow0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "True;id [int(4)];id [int(4)];False";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow2Row : WinRow
    {
        
        public UIRow2Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Value] = "True;lastName [varchar(255)];lastName [varchar(255)];False";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WinCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICompareWindow : WinWindow
    {
        
        public UICompareWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCompare";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UICompareButton
        {
            get
            {
                if ((this.mUICompareButton == null))
                {
                    this.mUICompareButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICompareButton.SearchProperties[WinButton.PropertyNames.Name] = "Compare";
                    this.mUICompareButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUICompareButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICompareButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDgvResultWindow : WinWindow
    {
        
        public UIDgvResultWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dgvResult";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public UIDataGridViewTable1 UIDataGridViewTable
        {
            get
            {
                if ((this.mUIDataGridViewTable == null))
                {
                    this.mUIDataGridViewTable = new UIDataGridViewTable1(this);
                }
                return this.mUIDataGridViewTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDataGridViewTable1 mUIDataGridViewTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDataGridViewTable1 : WinTable
    {
        
        public UIDataGridViewTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "DataGridView";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public UIRow0Row1 UIRow0Row
        {
            get
            {
                if ((this.mUIRow0Row == null))
                {
                    this.mUIRow0Row = new UIRow0Row1(this);
                }
                return this.mUIRow0Row;
            }
        }
        
        public UIRow5Row UIRow5Row
        {
            get
            {
                if ((this.mUIRow5Row == null))
                {
                    this.mUIRow5Row = new UIRow5Row(this);
                }
                return this.mUIRow5Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow0Row1 mUIRow0Row;
        
        private UIRow5Row mUIRow5Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow0Row1 : WinRow
    {
        
        public UIRow0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Sang;Ricky;Male;1992/3/3;Ricky;18712345678;False;1;Sang;Ricky;Male;1993/3/3;test" +
                        ";11111;True", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinCell UIItem1Cell
        {
            get
            {
                if ((this.mUIItem1Cell == null))
                {
                    this.mUIItem1Cell = new WinCell(this);
                    #region Search Criteria
                    this.mUIItem1Cell.SearchProperties[WinCell.PropertyNames.Value] = "1";
                    this.mUIItem1Cell.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIItem1Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIItem1Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRow5Row : WinRow
    {
        
        public UIRow5Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinRow.PropertyNames.Value, ";Joni;B;Female;1992/3/9;Joni;18712345678;True;(null);(null);(null);(null);(null);" +
                        "(null);(null);False", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinCell UITrueCell
        {
            get
            {
                if ((this.mUITrueCell == null))
                {
                    this.mUITrueCell = new WinCell(this);
                    #region Search Criteria
                    this.mUITrueCell.SearchProperties[WinCell.PropertyNames.Value] = "True";
                    this.mUITrueCell.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUITrueCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUITrueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIExportWindow : WinWindow
    {
        
        public UIExportWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExport";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinButton UIExportButton
        {
            get
            {
                if ((this.mUIExportButton == null))
                {
                    this.mUIExportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExportButton.SearchProperties[WinButton.PropertyNames.Name] = "Export";
                    this.mUIExportButton.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIExportButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExportButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIShowDiffColumnsOnlyWindow : WinWindow
    {
        
        public UIShowDiffColumnsOnlyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkShowDiff";
            this.WindowTitles.Add("DataCompare");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIShowDiffColumnsOnlyCheckBox
        {
            get
            {
                if ((this.mUIShowDiffColumnsOnlyCheckBox == null))
                {
                    this.mUIShowDiffColumnsOnlyCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIShowDiffColumnsOnlyCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Show Diff Columns Only";
                    this.mUIShowDiffColumnsOnlyCheckBox.WindowTitles.Add("DataCompare");
                    #endregion
                }
                return this.mUIShowDiffColumnsOnlyCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIShowDiffColumnsOnlyCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIComparingWindow : WinWindow
    {
        
        public UIComparingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Comparing";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Comparing");
            #endregion
        }
        
        #region Properties
        public UIFinishWindow UIFinishWindow
        {
            get
            {
                if ((this.mUIFinishWindow == null))
                {
                    this.mUIFinishWindow = new UIFinishWindow(this);
                }
                return this.mUIFinishWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFinishWindow mUIFinishWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFinishWindow : WinWindow
    {
        
        public UIFinishWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnFinish";
            this.WindowTitles.Add("Comparing");
            #endregion
        }
        
        #region Properties
        public WinButton UIFinishButton
        {
            get
            {
                if ((this.mUIFinishButton == null))
                {
                    this.mUIFinishButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFinishButton.SearchProperties[WinButton.PropertyNames.Name] = "Finish";
                    this.mUIFinishButton.WindowTitles.Add("Comparing");
                    #endregion
                }
                return this.mUIFinishButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFinishButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICompareResult2014091Window : WinWindow
    {
        
        public UICompareResult2014091Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Compare Result - 20140918030035.xlsx - Excel";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLMAIN";
            this.WindowTitles.Add("Compare Result - 20140918030035.xlsx - Excel");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Compare Result - 20140918030035.xlsx - Excel");
            #endregion
        }
        
        #region Properties
        public UIRibbonPropertyPage UIRibbonPropertyPage
        {
            get
            {
                if ((this.mUIRibbonPropertyPage == null))
                {
                    this.mUIRibbonPropertyPage = new UIRibbonPropertyPage(this);
                }
                return this.mUIRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPropertyPage mUIRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRibbonPropertyPage : WinControl
    {
        
        public UIRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Compare Result - 20140918030035.xlsx - Excel");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIItemTitleBar.WindowTitles.Add("Compare Result - 20140918030035.xlsx - Excel");
                    #endregion
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIItemTitleBar;
        #endregion
    }
}
